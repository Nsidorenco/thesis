(* Formalization of Sigma Protocols *)
require import AllCore Distr DBool.

require SigmaProtocols.

(** Ignore: This is now the preferred setup but is not yet the default **)
pragma -oldip. pragma +implicits.

type statement1.
type statement2.
type witness1.
type witness2.
type message1.
type message2.
type randomness.
type challenge.
type response1.
type response2.

type statement = (statement1 * statement2).
type message = (message1 * message2).
type witness = (witness1 * witness2).
type response = (response1  * response2).

type transcript = message * challenge * response.

(* define the relations *)
op R1 (x : statement1, w : witness1) : bool.
op R2 (x : statement2, w : witness2) : bool.
op R = fun x w => (R1 (fst x) (fst w)) /\ (R2 (snd x) (snd w)).

op dchallenge : {challenge distr | is_lossless dchallenge /\ is_funiform dchallenge} as dchallenge_llfuni.

op (^^) (c1 : challenge, c2 : challenge) : challenge.
axiom xorK x c1 : (x ^^ c1) ^^ c1 = x.
axiom xorA x y : x ^^ y = y ^^ x.

clone SigmaProtocols as S1 with
  type statement <- statement1,
  type witness <- witness1,
  type message <- message1,
  type challenge <- challenge,
  type response <- response1,

  op R = R1,
  op dchallenge = dchallenge
  proof *.
  realize dchallenge_llfuni by apply dchallenge_llfuni.

clone SigmaProtocols as S2 with
  type statement <- statement2,
  type witness <- witness2,
  type message <- message2,
  type challenge <- challenge,
  type response <- response2,

  op R = R2,
  op dchallenge = dchallenge
  proof *.
  realize dchallenge_llfuni by apply dchallenge_llfuni.

clone SigmaProtocols as Sigma with
  type statement <- (statement1 * statement2),
  type witness <- witness,
  type message <- message,
  type challenge <- challenge,
  type response <- response,

  op R = R,
  op dchallenge = dchallenge
  proof *.
  realize dchallenge_llfuni by apply dchallenge_llfuni.
export Sigma.


module ANDProtocol (P1 : S1.SProtocol, P2 : S2.SProtocol) : Sigma.SProtocol = {
  proc gen() : statement * witness = {
    var h1, h2, w1, w2;
    (h1, w1) = P1.gen();
    (h2, w2) = P2.gen();
    return ((h1, h2), (w1, w2));
  }

  proc init(h : statement, w : witness) = {
    var h1, h2, w1, w2, a1, a2;
    (h1, h2) = h;
    (w1, w2) = w;

    a1 = P1.init(h1, w1);
    a2 = P2.init(h2, w2);
    return (a1, a2);
  }

  proc response(h : statement, w : witness, m : message, e : challenge) : response = {
    var m1, m2, h1, h2, w1, w2, z1, z2;
    (m1, m2) = m;
    (h1, h2) = h;
    (w1, w2) = w;

    z1 = P1.response(h1, w1, m1, e);
    z2 = P2.response(h2, w2, m2, e);
    return (z1, z2);
  }

  proc verify(h : statement, m : message, e : challenge, z : response) : bool = {
    var h1, h2, m1, m2, z1, z2, v, v';
    (h1, h2) = h;
    (m1, m2) = m;
    (z1, z2) = z;

    v = P1.verify(h1, m1, e, z1);
    v' = P2.verify(h2, m2, e, z2);

    return (v /\ v');

  }

  proc witness_extractor(h : statement, m : message,
                          e : challenge, e' : challenge,
                          z : response, z' : response) = {
    var h1, h2, m1, m2, z1, z2, z1', z2', w1, w2;
    (h1, h2) = h;
    (m1, m2) = m;
    (z1, z2) = z;
    (z1', z2') = z';
    w1 = P1.witness_extractor(h1, m1, e, e', z1, z1');
    w2 = P2.witness_extractor(h2, m2, e, e', z2, z2');
    return (w1, w2);
  }

  proc simulator(h : statement, c : challenge) : message * response = {
    var h1, h2, a1, a2, z1, z2;
    (h1, h2) = h;

    (a1, z1) = P1.simulator(h1, c);
    (a2, z2) = P2.simulator(h2, c);

    return ((a1, a2), (z1, z2));
  }

}.
section Security.
declare module SP1 : S1.SProtocol{ANDProtocol}.
declare module SP2 : S2.SProtocol{ANDProtocol,SP1}.

axiom lossless_sp1_init : islossless SP1.init.
axiom lossless_sp1_response : islossless SP1.response.
axiom lossless_sp1_verify : islossless SP1.verify.
axiom lossless_sp2_init : islossless SP2.init.
axiom lossless_sp2_response : islossless SP2.response.
axiom lossless_sp2_verify : islossless SP2.verify.

local module C1 = S1.Completeness(SP1).
local module C2 = S2.Completeness(SP2).

local module SHVZK1 = S1.SHVZK(SP1).
local module SHVZK2 = S2.SHVZK(SP2).

axiom completeness_protocol1 h w e &m : (R1 h w) => Pr[S1.Completeness(SP1).special(h, w, e) @ &m : res] = 1%r.
axiom completeness_protocol2 h w e &m : (R2 h w) => Pr[S2.Completeness(SP2).special(h, w, e) @ &m : res] = 1%r.

axiom shvzk1_equiv h' w' e':
  equiv[S1.SHVZK(SP1).real ~ S1.SHVZK(SP1).ideal : (={h, e} /\ e{2} = e' /\ h{2} = h' /\ w{1} = w' /\ (R1 h' w')) ==> ={res}].
axiom shvzk2_equiv h' w' e':
  equiv[S2.SHVZK(SP2).real ~ S2.SHVZK(SP2).ideal : (={h, e} /\ e{2} = e' /\ h{2} = h' /\ w{1} = w' /\ (R2 h' w')) ==> ={res}].

local lemma shvzk1_equiv_pr h' w' e' &m:
    (R1 h' w') =>
    Pr[S1.SHVZK(SP1).real(h', w', e') @ &m : (res <> None)] =
    Pr[S1.SHVZK(SP1).ideal(h', e') @ &m : (res <> None)].
proof. move=>rel.
by byequiv (shvzk1_equiv h' w' e'). qed.

(* local lemma shvzk1_ideal_never_fails_pr h' &m: *)
(*     Pr[S1.SHVZK(SP1).ideal(h') @ &m : (res <> None)] = 1%r. *)
(* proof. *)
(*    have eq := (shvzk1_equiv h'). *)
(*    have H := (completeness_protocol1 h'). *)


(* local lemma shvzk1_ideal_completeness h' w' &m: *)
(*     Pr[S1.SHVZK(SP1).ideal(h') @ &m : (res <> None)] = *)
(*     Pr[C1.special(h', w') @ &m : res]. *)
(* proof. have H := (shvzk1 h' w' &m). *)
(*   rewrite -H. *)
(*   have -> := (S1.shvzk_real_never_fail SP1 h' w' &m). *)
(*   byequiv=>//. proc. sim. qed. *)

(* NOTE: proof idea... *)
(* Pr[ideal] = (forall w, (R h w), Pr[real])*)

axiom shvzk1_ideal_never_fails_pr h' e' &m:
    Pr[S1.SHVZK(SP1).ideal(h', e') @ &m : (res <> None)] = 1%r.
axiom shvzk2_ideal_never_fails_pr h' e' &m:
    Pr[S2.SHVZK(SP2).ideal(h', e') @ &m : (res <> None)] = 1%r.

local lemma shvzk1_ideal_never_fails h' e':
      phoare[S1.SHVZK(SP1).ideal : (h = h' /\ e = e') ==> (res <> None)] = 1%r.
proof. bypr=> &m ?. by have H := (shvzk1_ideal_never_fails_pr h{m} e{m} &m). qed.

local lemma shvzk2_ideal_never_fails h' e':
      phoare[S2.SHVZK(SP2).ideal : (h = h' /\ e = e') ==> (res <> None)] = 1%r.
proof. bypr=> &m ?. by have H := (shvzk2_ideal_never_fails_pr h{m} e{m} &m). qed.

local lemma shvzk1_real_never_fails h' w' e':
      phoare[S1.SHVZK(SP1).real : (h = h' /\ w = w' /\ e = e' /\ (R1 h' w')) ==> (res <> None)] = 1%r.
proof.
bypr. progress.
have -> := (S1.shvzk_real_never_fail SP1 h{m} w{m} e{m} &m).
by have := (completeness_protocol1 h{m} w{m} e{m} &m H).
qed.

local lemma shvzk2_real_never_fails h' w' e':
      phoare[S2.SHVZK(SP2).real : (h = h' /\ w = w' /\ e = e' /\ (R2 h' w')) ==> (res <> None)] = 1%r.
proof.
bypr. progress.
have -> := (S2.shvzk_real_never_fail SP2 h{m} w{m} e{m} &m).
by have := (completeness_protocol2 h{m} w{m} e{m} &m H).
qed.

(* Converting the ambient logic to the pHoare logic *)
local lemma SP1_completeness_pr h' w' e' : phoare[C1.special : (h = h' /\ e = e' /\ w = w' /\ (R1 h' w')) ==> res] = 1%r.
  proof. bypr=> &m ?. have := (completeness_protocol1 h{m} w{m} e{m} &m). smt(). qed.
local lemma SP2_completeness_pr h' w' e' : phoare[C2.special : (h = h' /\ e = e' /\ w = w' /\ (R2 h' w')) ==> res] = 1%r.
  proof. bypr=> &m ?. have := (completeness_protocol2 h{m} w{m} e{m} &m). smt(). qed.

local module Completeness' = {
  var v1 : bool
  var v2 : bool
  proc completeness1 (h1 : statement1, w : witness1, e : challenge) : bool = {
      var a1, z1, v1;

      a1 = SP1.init(h1, w);
      z1 = SP1.response(h1, w, a1, e);
      v1 = SP1.verify(h1, a1, e, z1);
      return v1;
  }

  proc completeness2 (h2 : statement2, w : witness2, e : challenge) : bool = {
      var a2, z2, v2;

      a2 = SP2.init(h2, w);
      z2 = SP2.response(h2, w, a2, e);
      v2 = SP2.verify(h2, a2, e, z2);
      return v2;
  }

  proc main(h : statement, w : witness, e : challenge) : bool = {
    var h1, h2, w1, w2;
    (h1, h2) = h;
    (w1, w2) = w;
    v1 = completeness1(h1, w1, e);
    v2 = completeness2(h2, w2, e);
    return v1 /\ v2;
  }
}.

local lemma completeness_sim_equiv h' w' e' &m:
    (R h' w') =>
    Pr[Sigma.Completeness(ANDProtocol(SP1,SP2)).special(h', w', e') @ &m : res] =
    Pr[Completeness'.main(h', w', e') @ &m : (Completeness'.v1 /\ Completeness'.v2)].
proof.
  move=>rel.
  byequiv=>//.
  proc. inline *.
  swap{2} [8..9] 5; swap{2} 7 4.
  do ? (wp; call (:true)); auto.
qed.

local lemma split1_true h' w' e':
    (R1 (fst h') (fst w')) =>
    phoare[Completeness'.main : (h = h' /\ w = w' /\ e = e') ==> (Completeness'.v1)] = 1%r.
proof.
  move=> rel. bypr=> &m ?. have <- := (completeness_protocol1 (fst h') (fst w') e' &m rel).
  byequiv=>//.
  proc. inline *. wp.
  swap{1} [6..9] 6.
  do ? (wp; call (:true)). sp.
  kill{1} 1 ! 3.
   - by call (lossless_sp2_verify); call (lossless_sp2_response); call (lossless_sp2_init).
  auto; smt(). qed.

local lemma split2_true h' w' e':
    (R2 (snd h') (snd w')) =>
    phoare[Completeness'.main : (h = h' /\ w = w' /\ e = e') ==> Completeness'.v2] = 1%r.
proof.
  move=> rel. bypr=> &m ?. have <- := (completeness_protocol2 (snd h') (snd w') e' &m rel).
  byequiv=>//.
  proc. inline *.
  do ? (wp; call (:true)). sp. wp.
  kill{1} 1 ! 3.
   - by call (lossless_sp1_verify); call (lossless_sp1_response); call (lossless_sp1_init).
  auto; smt().
qed.

local lemma completeness'_true h' w' e':
    phoare[Completeness'.main : (h = h' /\ e = e' /\ w = w' /\ (R h' w')) ==> (Completeness'.v1 /\ Completeness'.v2)] = 1%r.
proof.
  (* rewrite /R. move=>[rel1 rel2]. *)
  phoare split 1%r 1%r 1%r; rewrite /R.
  - progress.
  - bypr. progress. by byphoare (split1_true h{m} w{m} e{m} H).
  - bypr. progress. by byphoare (split2_true h{m} w{m} e{m} H0).
  - bypr. progress.
    have <- : Pr[Completeness'.main(h{m}, w{m}, e{m}) @ &m : Completeness'.v2] = 1%r.
     - by byphoare (split2_true h{m} w{m} e{m} H0).
    byequiv=>//. proc *.
    call{1} (split1_true h{m} w{m} e{m} H).
    call{2} (split2_true h{m} w{m} e{m} H0).
    auto; smt().
  qed.

lemma and_completeness h' w' e' &m:
    (R h' w') =>
    Pr[Sigma.Completeness(ANDProtocol(SP1,SP2)).special(h', w', e') @ &m : res] = 1%r.
proof.
  move=> rel. have -> := (completeness_sim_equiv h' w' e' &m rel).
  byphoare(: h = h' /\ e = e' /\ w = w' /\ (R h' w') ==> _ )=>//.
  proc *. by call (completeness'_true h' w' e').
qed.


  local module SHVZK' = {
      proc ideal(h, e) = {
        var h1, h2, a1, a2, z1, z2, ret, t1, t2;
        (h1, h2) = h;

        t1 = SHVZK1.ideal(h1, e);
        t2 = SHVZK2.ideal(h2, e);
        if (t1 = None \/ t2 = None) {
          ret = None;
        } else {
          (a1, e, z1) = oget(t1);
          (a2, e, z2) = oget(t2);
          ret = Some ((a1, a2), e, (z1, z2));
        }
        return ret;
      }
      proc real(h, w, e) = {
        var h1, h2, a1, a2, z1, z2, ret, t1, t2, w1, w2;
        (h1, h2) = h;
        (w1, w2) = w;

        t1 = SHVZK1.real(h1, w1, e);
        t2 = SHVZK2.real(h2, w2, e);
        if (t1 = None \/ t2 = None) {
          ret = None;
        } else {
          (a1, e, z1) = oget(t1);
          (a2, e, z2) = oget(t2);
          ret = Some ((a1, a2), e, (z1, z2));
        }
        return ret;
      }
    }.

    local equiv ideal_ideal'_equiv h' e':
      SHVZK'.ideal ~ Sigma.SHVZK(ANDProtocol(SP1, SP2)).ideal
      : (={h, e, glob SP1, glob SP2} /\ h{2} = h' /\ e{2} = e') ==> ={res}.
    proof.
    proc. inline *.
    swap{1} [9..11] -4.
    do ? (wp; call (:true)). auto.
    qed.

    local equiv real_real'_equiv h' w' e':
      Sigma.SHVZK(ANDProtocol(SP1, SP2)).real ~ SHVZK'.real
      : (={h, w, e, glob SP1, glob SP2} /\ h{1} = h' /\ e{1} = e' /\ w{1} = w') ==> ={res}.
    proof.
      proc. inline *.
      wp. call (:true).
      swap{2} [8..11] 5; swap{2} 7 4.
      do ? (wp; call (:true)); auto.
    qed.


  equiv and_shvzk h' w' e':
      Sigma.SHVZK(ANDProtocol(SP1, SP2)).real ~
      Sigma.SHVZK(ANDProtocol(SP1, SP2)).ideal
      : (h{1} = h' /\ e{2} = e' /\ ={h, e, glob SP1, glob SP2} /\ w{1} = w' /\ (R h' w')) ==> ={res}.
  proof.
    have ? := (real_real'_equiv h' w' e').
    have ? := (ideal_ideal'_equiv h' e').
    transitivity SHVZK'.real
      (={h, w, e, glob SP1, glob SP2} /\ h{1} = h' /\ e{1} = e' /\ w{1} = w' ==> ={res})
      (h{1} = h' /\ e{2} = e' /\ ={h, e, glob SP1, glob SP2} /\ w{1} = w' /\ (R h' w') ==> ={res})=>//;
    first smt().
    transitivity SHVZK'.ideal
      (h{2} = h' /\ e{2} = e' /\  ={h, e, glob SP1, glob SP2} /\ w{1} = w' /\ (R h' w') ==> ={res})
      (={h, e, glob SP1, glob SP2} /\ h{2} = h' /\ e{2} = e' ==> ={res})=>//;
    first smt().
    proc. sim. sp.
    call (shvzk2_equiv (snd h') (snd w') e').
    call (shvzk1_equiv (fst h') (fst w') e').
    auto; smt().
  qed.

  axiom special_soundness_sp1 x msg ch ch' d d' &m :
    phoare[SP1.verify : (h = x /\ m = msg /\ e = ch /\ z = d) ==> res] = 1%r =>
    phoare[SP1.verify : (h = x /\ m = msg /\ e = ch' /\ z = d') ==> res] = 1%r =>
    Pr[S1.SpecialSoundness(SP1).main(x, msg, ch, ch', d, d') @ &m : res] = 1%r.

  axiom special_soundness_sp2 x msg ch ch' d d' &m :
    phoare[SP2.verify : (h = x /\ m = msg /\ e = ch /\ z = d) ==> res] = 1%r =>
    phoare[SP2.verify : (h = x /\ m = msg /\ e = ch' /\ z = d') ==> res] = 1%r =>
    Pr[S2.SpecialSoundness(SP2).main(x, msg, ch, ch', d, d') @ &m : res] = 1%r.

  local module SpecialSoundness' = {
      var w1 : witness1
      var w2 : witness2
      var v1 : bool
      var v1' : bool
      var v2 : bool
      var v2' : bool
      proc special_soundness1(h1 : statement1, m, e, e', z, z') = {
        v1  = SP1.verify(h1, m, e, z);
        v1' = SP1.verify(h1, m, e', z');

        w1 = SP1.witness_extractor(h1, m, e, e', z, z');

        return (e <> e' /\ (R1 h1 w1) /\ v1 /\ v1');
      }
      proc special_soundness2(h2 : statement2, m, e, e', z, z') = {
        v2  = SP2.verify(h2, m, e, z);
        v2' = SP2.verify(h2, m, e', z');

        w2 = SP2.witness_extractor(h2, m, e, e', z, z');

        return (e <> e' /\ (R2 h2 w2) /\ v2 /\ v2');
      }
      proc main(h, m, e e' : challenge, z, z') = {
        var z1,z1',z2,z2',h1,h2,m1,m2;
        (m1, m2) = m;
        (h1, h2) = h;
        (z1, z2) = z;
        (z1', z2') = z';
        special_soundness1(h1, m1, e, e', z1, z1');
        special_soundness2(h2, m2, e, e', z2, z2');
        return (e <> e' /\ (R h (w1, w2)) /\ v1 /\ v1' /\ v2 /\ v2');
      }
    }.

  local lemma special_soundness_soundness'_equiv
    x msg ch ch' z1 z1' z2 z2' &m:
      ch <> ch' =>
      Pr[SpecialSoundness'.main(x, msg, ch, ch', (z1, z2), (z1', z2')) @ &m : res] =
      Pr[Sigma.SpecialSoundness(ANDProtocol(SP1, SP2)).main(x, msg, ch, ch', (z1, z2), (z1', z2')) @ &m : res].
  proof.
    move=> ch_diff.
    byequiv=>//. proc. inline *. sp.
    swap{1} 3 8; swap{1} 2 7.
    do ? (wp; call (:true)).
    skip; smt().
  qed.

  local lemma special_soundness1'
    x msg ch ch' r r':
      phoare[SP1.verify : (h = x /\ m = msg /\ e = ch /\ z = r) ==> res] = 1%r =>
      phoare[SP1.verify : (h = x /\ m = msg /\ e = ch' /\ z = r') ==> res] = 1%r =>
      phoare[SpecialSoundness'.special_soundness1 :
        (h1 = x /\ m = msg /\ e = ch /\ e' = ch' /\ z = r /\ z' = r') ==> (res /\ SpecialSoundness'.v1 /\ SpecialSoundness'.v1' /\ R1 x SpecialSoundness'.w1)] = 1%r.
  proof.
    move=> accept1 accept2.
    bypr. progress.
    have <- := (special_soundness_sp1 h1{m} m{m} e{m} e'{m} z{m} z'{m} &m accept1 accept2).
    byequiv=>//. proc. by do ? call(:true). qed.

  local lemma special_soundness2'
    x msg ch ch' r r':
      phoare[SP2.verify : (h = x /\ m = msg /\ e = ch /\ z = r) ==> res] = 1%r =>
      phoare[SP2.verify : (h = x /\ m = msg /\ e = ch' /\ z = r') ==> res] = 1%r =>
      phoare[SpecialSoundness'.special_soundness2 :
        (h2 = x /\ m = msg /\ e = ch /\ e' = ch' /\ z = r /\ z' = r') ==> (res /\ SpecialSoundness'.v2 /\ SpecialSoundness'.v2' /\ R2 x SpecialSoundness'.w2)] = 1%r.
  proof.
    move=> accept1 accept2.
    bypr. progress.
    have <- := (special_soundness_sp2 h2{m} m{m} e{m} e'{m} z{m} z'{m} &m accept1 accept2).
    byequiv=>//. proc. by do ? call(:true). qed.

  local lemma special_soundness'
    x msg ch ch' z1 z1' z2 z2' &m:
      ch <> ch' =>
      phoare[SP1.verify : (h = (fst x) /\ m = (fst msg) /\ e = ch /\ z = z1) ==> res] = 1%r =>
      phoare[SP1.verify : (h = (fst x) /\ m = (fst msg) /\ e = ch' /\ z = z1') ==> res] = 1%r =>
      phoare[SP2.verify : (h = (snd x) /\ m = (snd msg) /\ e = ch /\ z = z2) ==> res] = 1%r =>
      phoare[SP2.verify : (h = (snd x) /\ m = (snd msg) /\ e = ch' /\ z = z2') ==> res] = 1%r =>
      Pr[SpecialSoundness'.main(x, msg, ch, ch', (z1, z2), (z1', z2')) @ &m : res] = 1%r.
  proof.
    move=> ch_diff accept11 accept12 accept21 accept22.
    have H1 := (special_soundness1' (fst x) (fst msg) ch ch' z1 z1' accept11 accept12).
    have H2 := (special_soundness2' (snd x) (snd msg) ch ch' z2 z2' accept21 accept22).
    byphoare(: h = x /\ m = msg /\ e = ch /\ e' = ch' /\ z = (z1, z2) /\ z' = (z1', z2') ==> _)=>//.
    proc. sp.
    by (call H2; call H1).
  qed.

  (* TODO: Can this be written with just: *)
  (* phoare[OR.verify ==> res]? *)
  lemma or_special_soundness x msg ch ch' z1 z2 z1' z2' &m:
      ch <> ch' =>
      phoare[SP1.verify : (h = (fst x) /\ m = (fst msg) /\ e = ch /\ z = z1) ==> res] = 1%r =>
      phoare[SP1.verify : (h = (fst x) /\ m = (fst msg) /\ e = ch' /\ z = z1') ==> res] = 1%r =>
      phoare[SP2.verify : (h = (snd x) /\ m = (snd msg) /\ e = ch /\ z = z2) ==> res] = 1%r =>
      phoare[SP2.verify : (h = (snd x) /\ m = (snd msg) /\ e = ch' /\ z = z2') ==> res] = 1%r =>
      Pr[Sigma.SpecialSoundness(ANDProtocol(SP1, SP2)).main(x, msg, ch, ch', (z1, z2), (z1', z2')) @ &m : res] = 1%r.
  proof. move=> ch_diff accept11 accept12 accept21 accept22.
    have <- := (special_soundness_soundness'_equiv x msg ch ch' z1 z1' z2 z2' &m ch_diff).
    by have := (special_soundness' x msg ch ch' z1 z1' z2 z2' &m ch_diff accept11 accept12 accept21 accept22).
  qed.

end section Security.
